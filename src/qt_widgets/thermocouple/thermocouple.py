#!/usr/bin/python
# -*- coding: ascii -*-
"""
oooooooooooo       oooo oooo                    ooooo                 .o8
`888'     `8       `888 `888                    `888'                "888
 888       .ooooo.  888  888  .ooooo.  .oooo.o   888         .oooo.   888oooo.
 888oooo8 d88' `88b 888  888 d88' `88bd88(  "8   888        `P  )88b  d88' `88b
 888    " 888ooo888 888  888 888ooo888`"Y88b.    888         .oP"888  888   888
 888      888    .o 888  888 888    .oo.  )88b   888       od8(  888  888   888
o888o     `Y8bod8P'o888oo888o`Y8bod8P'8""888P'  o888ooooood8`Y888""8o `Y8bod8P'

@summary
@author        Sigve Karolius
@organization  Department of Chemical Engineering, NTNU, Norway
@contact       sigve.karolius@ntnu.no
@license       Free (GPL.v3) !!! Distributed as-is !!!
@requires      Python 2.7.x or higher
@since         2017-06-16
@version       0.1

"""

#from PyQt5.QtCore import (QTimer, pyqtProperty, pyqtSignal, pyqtSlot, QObject,
#QSize, QThread, QMetaObject, QEvent)
#from PyQt5.QtWidgets import (QMainWindow, QLabel, QWidget, QPushButton,
# QHBoxLayout, QVBoxLayout, QMenuBar, QStatusBar, QAbstractButton)
#from PyQt5.QtGui import QIcon, QPixmap, QFont

from PyQt4.QtCore import (QTimer, pyqtProperty, pyqtSignal, pyqtSlot, QObject,
QSize, QThread, QMetaObject, QEvent, Qt)
from PyQt4.QtGui import (QIcon, QPixmap, QFont, QMainWindow, QLabel, QWidget,
QPushButton,  QHBoxLayout, QVBoxLayout, QMenuBar, QStatusBar, QAbstractButton,
QDialog)

from felleslab.gui import QFellesWidgetBaseClass
from felleslab.equipment import JType
from felleslab import icons

from time import time


# Thermocouple Widget ------------------------------------------------------- #
class QFellesThermocouple(QFellesWidgetBaseClass):
    """
    @brief     Widget
    """
    newSample = pyqtSignal(str)

    meta = { "type": "Temperature",
             "name": "Top",
             "unit": "[C]",
             "channel" : 0,
             "portname" : "/dev/ttyUSB0",
             "slaveaddress": 1,
             "baudrate" : 19200,
    }
    _slave = JType


    def initUi(self, parent=None):
        """ Generates the user interface """

        self.label = QLabel(parent)
        self.label.setObjectName("JTypeThermocouple")
        self.label.setPixmap(QPixmap(":icons/thermocouples/16x16_thumbnail.png"))

        _layout = QHBoxLayout()  # whatever layout you want
        _layout.addWidget(self.label)

        self.setLayout(_layout)

    def paintEvent(self, event=None, *args):
        pass

    def closeEvent(self, event):
        print("Closing Thermocouple")

    @pyqtSlot()
    def setSample(self, event=None):
        """ Called to update widget in GUI
        """
        sample = self.slave.get_analog_in()
        self.newSample.emit(str(sample))

#def mousePressEvent(self, event):
#    if event.button() == Qt.RightButton:
#        dg = QFellesDialog(self)
#        dg.show()


# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #
if __name__ == '__main__':
    #from PyQt5.QtWidgets import QApplication
    from PyQt4.QtGui import QApplication
    from FellesLab import run_gui

    try:
        _encoding = QApplication.UnicodeUTF8
        def _translate(context, text, disambig):
            return QApplication.translate(context, text, disambig, _encoding)
    except AttributeError:
        def _translate(context, text, disambig):
            return QApplication.translate(context, text, disambig)

    class Ui_MainWindow(object):
        """ This code is normally generated by Qt Designer """

        def setupUi(self, MainWindow):
            """
            """

            MainWindow.resize(100,200)

            # Create the "Central Widget" and add a "Layout"
            self.centralwidget = QWidget(MainWindow)
            MainWindow.setCentralWidget(self.centralwidget)
            self.verticalLayout= QVBoxLayout(self.centralwidget)

            # Add a Temperature sensor and Label Widgets
            self.t1 = QFellesThermocouple(self.centralwidget)
            self.label = QLabel(self.centralwidget)
            self.label.setText("[C]")

            # Add Widgets to Layout
            self.verticalLayout.addWidget(self.t1)
            self.verticalLayout.addWidget(self.label)

            # Add connections
            self.t1.measurement_updated.connect(self.label.setText)

            # Create the Menu bar
            self.menubar = QMenuBar(MainWindow)
            MainWindow.setMenuBar(self.menubar)
            # Create the Status Bar
            self.statusbar = QStatusBar(MainWindow)
            MainWindow.setStatusBar(self.statusbar)

            self.retranslateUi(MainWindow)

        def retranslateUi(self, MainWindow):
            """
            """
            self.t1.setProperty("slaveaddress", _translate("MainWindow", "2", None))


    run_gui(Ui_MainWindow)


